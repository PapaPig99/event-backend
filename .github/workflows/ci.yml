name: CI / Build, Push & E2E (GHCR + Containerized Jobs)

on:
  push:
    branches: [ main, feat/** ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}/event-backend

jobs:
  build_test:
    name: Build & Unit Test (auto-detect backend dir)
    runs-on: ubuntu-latest
    # รันในคอนเทนเนอร์ Gradle ตามที่ต้องการ
    container:
      image: gradle:8.7-jdk17
      options: --user root

    # ❗❗ สำคัญ: อย่าใส่ defaults.run.working-directory ที่ระดับ workflow/job
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show workspace (debug)
        run: |
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          ls -la
          echo "----"
          if [ -d event-backend ]; then echo "Found ./event-backend"; ls -la event-backend; fi
          if [ -f gradlew ]; then echo "Found ./gradlew at repo root"; fi

      # ✅ Auto-detect ตำแหน่ง Gradle project: ใช้ ./event-backend ถ้ามี, ไม่งั้นใช้ราก repo (.)
      - name: Detect backend dir
        id: detect
        run: |
          if [ -f "event-backend/gradlew" ]; then
            echo "BACKEND_DIR=event-backend" >> $GITHUB_ENV
          elif [ -f "gradlew" ]; then
            echo "BACKEND_DIR=." >> $GITHUB_ENV
          else
            echo "❌ Cannot find gradlew in repo root or event-backend/"
            exit 1
          fi
          echo "Using BACKEND_DIR=${BACKEND_DIR}"

      - name: Make gradlew executable
        working-directory: ${{ env.BACKEND_DIR }}
        run: chmod +x ./gradlew

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle.*', '**/gradle-wrapper.properties', '**/build.gradle*', '**/settings.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Gradle build (with tests)
        working-directory: ${{ env.BACKEND_DIR }}
        run: ./gradlew clean build --no-daemon

      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          # รองรับทั้งกรณีอยู่ในราก หรืออยู่ใต้ event-backend/
          path: |
            build/libs/*.jar
            event-backend/build/libs/*.jar



  docker_build_push:
    name: Build & Push to GHCR
    needs: build_test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write   # ✅ ต้องมีสำหรับ GHCR
    outputs:
      image_tag: ${{ steps.meta.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          # จะได้ tag :sha-<commit> เสมอ และ :latest เฉพาะ main
          tags: |
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: ./event-backend
          file: ./event-backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  e2e:
    name: E2E with docker compose
    needs: docker_build_push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare env file for backend (CI)
        run: |
          if [ ! -f event-backend/.env.ci ]; then
            cat > event-backend/.env.ci <<'EOF'
          SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/eventdb?useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=utf8&serverTimezone=UTC
          SPRING_DATASOURCE_USERNAME=itds323
          SPRING_DATASOURCE_PASSWORD=itds323
          SPRING_PROFILES_ACTIVE=prod
          EOF
          fi

      - name: Use GHCR image tag (sha)
        run: |
          # แทนสตริงใน compose ให้ใช้รูป :sha-<commit> ที่ build ใน job ก่อนหน้า
          sed -i "s|BACKEND_IMAGE_REPLACED_BY_CI|${{ env.IMAGE_NAME }}:sha-${{ github.sha }}|g" docker-compose.ci.yml

      - name: Start stack
        run: docker compose -f docker-compose.ci.yml up -d --build

      - name: Wait for MySQL
        run: |
          for i in {1..30}; do
            if docker compose -f docker-compose.ci.yml ps | grep mysql | grep -q "healthy"; then
              echo "MySQL is healthy"; exit 0;
            fi
            echo "Waiting MySQL... ($i)"; sleep 5;
          done
          echo "MySQL not healthy"; docker compose -f docker-compose.ci.yml logs mysql; exit 1

      - name: Wait for backend health
        run: |
          for i in {1..30}; do
            if curl -fsS http://localhost:3137/actuator/health | grep -q '"status":"UP"'; then
              echo "Backend is UP"; exit 0;
            fi
            echo "Waiting backend... ($i)"; sleep 5
          done
          echo "Backend not ready"; docker compose -f docker-compose.ci.yml logs backend; exit 1

      - name: Smoke tests
        run: |
          set -e
          # เปลี่ยน endpoint ให้ตรงกับแอปของคุณ
          curl -fsS http://localhost:3137/api/events | jq '.[0]?' >/dev/null || (echo "GET /api/events failed" && exit 1)
          echo "Smoke tests passed"

      - name: Tear down
        if: always()
        run: docker compose -f docker-compose.ci.yml down -v
